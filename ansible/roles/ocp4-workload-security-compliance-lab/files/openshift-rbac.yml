apiVersion: v1
items:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: openshift-rbac
      build: openshift-rbac
    name: openshift-rbac
  spec:
    lookupPolicy:
      local: false
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: openshift-rbacs
    name: openshift-rbac
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: openshift-rbac
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: openshift-rbac
    name: openshift-rbac
  spec:
    port:
      targetPort: 8080
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: openshift-rbac
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  data:
    openshift-rbac.go: "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\n\nconst
      (\n\tdefaultKubernetesAPI = \"https://kubernetes.default.svc\"\n\n\tkubernetesCaFile
      \   = \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\"\n\tkubernetesTokenFile
      = \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n)\n\ntype KubernetesItem
      struct {\n}\n\ntype KubernetesResponse struct {\n\tItems []KubernetesItem `json:\"items\"`\n}\n\nfunc
      simpleHandler(w http.ResponseWriter, r *http.Request) {\n\n\tk8sAPI := os.Getenv(\"KUBERNETES_API\")\n\n\tif
      len(k8sAPI) == 0 {\n\t\tk8sAPI = defaultKubernetesAPI\n\t}\n\n\tk8sToken :=
      os.Getenv(\"KUBERNETES_TOKEN\")\n\n\tif len(k8sToken) == 0 {\n\t\ttokenFile,
      err := ioutil.ReadFile(kubernetesTokenFile)\n\t\t_, err = os.Stat(kubernetesTokenFile)\n\n\t\tif
      os.IsNotExist(err) {\n\t\t\tfmt.Fprintln(w, \"Error: Unable to determine API
      Token\")\n\t\t\treturn\n\t\t}\n\n\t\tk8sToken = string(tokenFile)\n\t}\n\n\tvar
      tlsConfig tls.Config\n\n\t_, err := os.Stat(kubernetesCaFile)\n\tif os.IsNotExist(err)
      {\n\t\ttlsConfig = tls.Config{InsecureSkipVerify: true}\n\t} else {\n\t\tcaCert,
      err := ioutil.ReadFile(kubernetesCaFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tcaCertPool
      := x509.NewCertPool()\n\t\tcaCertPool.AppendCertsFromPEM(caCert)\n\n\t\ttlsConfig
      = tls.Config{\n\t\t\tRootCAs: caCertPool,\n\t\t}\n\t}\n\n\tclient := &http.Client{\n\t\tTransport:
      &http.Transport{\n\t\t\tTLSClientConfig: &tlsConfig,\n\t\t},\n\t}\n\n\t_ = executeQuery(w,
      client, fmt.Sprintf(\"%s/api/v1/namespaces\", k8sAPI), k8sToken, \"Namespaces\")\n\n\t_
      = executeQuery(w, client, fmt.Sprintf(\"%s/apis/user.openshift.io/v1/users\",
      k8sAPI), k8sToken, \"Users\")\n\n}\n\nfunc listenAndServe(port string) {\n\tfmt.Printf(\"serving
      on %s\\n\", port)\n\terr := http.ListenAndServe(\":\"+port, nil)\n\tif err !=
      nil {\n\t\tpanic(\"ListenAndServe: \" + err.Error())\n\t}\n}\n\nfunc executeQuery(w
      http.ResponseWriter, client *http.Client, url string, k8sToken string, queryType
      string) error {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\",
      \"Bearer \"+k8sToken)\n\treq.Header.Add(\"Accept\", \"application/json\")\n\n\tkubernetesResponse,
      err := client.Do(req)\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tfmt.Fprintln(w,
      \"Error occurred\")\n\t\treturn fmt.Errorf(fmt.Sprintf(\"Error retrieving %s\",
      queryType))\n\t}\n\n\tif kubernetesResponse.StatusCode != 200 {\n\t\tfmt.Fprintln(w,
      fmt.Sprintf(\"Error occurred retrieving response for %s: %s\", queryType, kubernetesResponse.Status))\n\t\treturn
      fmt.Errorf(fmt.Sprintf(\"Error occurred retrieving response for %s: %s\", queryType,
      kubernetesResponse.Status))\n\t}\n\n\tdefer kubernetesResponse.Body.Close()\n\n\tvar
      kubernetesResp KubernetesResponse\n\n\tjson.NewDecoder(kubernetesResponse.Body).Decode(&kubernetesResp)\n\n\tfmt.Fprintln(w,
      fmt.Sprintf(\"Number of %s: %d\", queryType, len(kubernetesResp.Items)))\n\n\treturn
      nil\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", simpleHandler)\n\tport :=
      os.Getenv(\"PORT\")\n\tif len(port) == 0 {\n\t\tport = \"8080\"\n\t}\n\tgo listenAndServe(port)\n\n\tselect
      {}\n}\n"
  kind: ConfigMap
  metadata:
    labels:
      app: openshift-rbac
    name: openshift-rbac-source
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: openshift-rbac
      build: openshift-rbac
    name: openshift-rbac
  spec:
    failedBuildsHistoryLimit: 5
    output:
      to:
        kind: ImageStreamTag
        name: openshift-rbac:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      configMaps:
      - configMap:
          name: openshift-rbac-source
        destinationDir: /tmp/src
      type: None
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: golang:1.11.5
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: openshift-rbac
    name: openshift-rbac
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: openshift-rbac
    strategy:
      activeDeadlineSeconds: 21600
      resources:
        limits:
          memory: 128Mi
          cpu: 200m
        requests:
          memory: 128Mi
          cpu: 200m
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: openshift-rbac
          app: openshift-rbac
      spec:
        containers:
        - image: ''
          imagePullPolicy: Always
          name: openshift-rbac
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - openshift-rbac
        from:
          kind: ImageStreamTag
          name: openshift-rbac:latest
      type: ImageChange
kind: List
